const TDD = require("./testlib.js");
const LArray = require("./array.js");
const LBase = require("./base.js");
const LMath = require("./math.js");

console.log("Testing array.js");
TDD.assertEqual(3, LArray.Len([2,3,4]), "Len Should return correct len");
TDD.assertEqual(0, LArray.Len([]), "Len Should return zero for empty array");
TDD.assertEqual([1,2,3,4], LArray.Push([1,2,3])(4), "Push should return pushed array");
TDD.assertEqual([2,3], LArray.Slice([1,2,3,4])(1)(3), "Slice should slice properly");
TDD.assertEqual([1,2,3,4], LArray.Concat([1,2])([3,4]), "Concat should concat properly");
TDD.assertEqual([1,2], LArray.Pop([1,2,3]), "Pop should remove last object and return new array");
TDD.assertEqual([2,3], LArray.Shift([1,2,3]), "Shift should remove first object and return new array");
TDD.assertEqual([3,2,1], LArray.Reverse([1,2,3]), "Reverse should reverse array");
TDD.assertEqual([2,4,6], LArray.Map([1,2,3])((i) => 2 * i), "Map should map correctly");
TDD.assertEqual([2,4], LArray.Filter([1,2,3,4])((i) => i % 2 == 0), "Filter should filter correctly");
TDD.assertEqual("1,2,3", LArray.Join([1,2,3])(","), "Join should join properly");
TDD.assertEqual(6, LArray.Reduce([1,2,3])((a) => (c) => a + c)(0), "Reduce should reduce correctly");
TDD.assertEqual([1,2], LArray.Range(1)(3)(1), "Range should include first index but not last");
TDD.assertEqual([3,6,9], LArray.Range(3)(10)(3), "Range should handle step correctly");
TDD.assertEqual([0,1,2], LArray.AMap([0,0,0])((c) => (i) => i), "AMap should handle index");
TDD.assertEqual(["odd","odd"], LArray.AFilter(["even","odd","even","odd"])((c) => (i) => i % 2 == 1), "AFilter should handle index");
TDD.assertEqual(6, LArray.AReduce([0,0,0,0])((a) => (c) => (i) => a + i)(0), "AReduce should handle index");
TDD.assertEqual(true, LArray.Every([2,4,6,8])((n) => n % 2 == 0), "Every should return true if every value passes test");
TDD.assertEqual(false, LArray.Every([2,4,6,7])((n) => n % 2 == 0), "Every should return false if one value failes test");
TDD.assertEqual(true, LArray.AEvery([1,2,3])((n) => (i) => i + 1 == n), "AEvery should work with index");
TDD.assertEqual(true, LArray.Some([1,2,3])((n) => n % 2 == 0), "Some should return true if one value passes test");
TDD.assertEqual(false, LArray.Some([1,3,5])((n) => n % 2 == 0), "Some should return false if all values fail test");
TDD.assertEqual(true, LArray.ASome([0,3,4])((n) => (i) => n == i), "ASome should work with index");
TDD.assertEqual(true, LArray.Includes([1,2,3,4])(2), "Includes should return true if item is found");
TDD.assertEqual(false, LArray.Includes([1,3,4])(2), "Includes should return false if item is not found");
console.log("Testing math.js");
TDD.assertEqual(2, LMath.Abs(-2), "Abs should return -x if x is negative");
TDD.assertEqual(2, LMath.Abs(2), "Abs should return x if x is positive or zero");
TDD.assertEqual(-1, LMath.Sign(-2), "Sign should return -1 for negative numbers");
TDD.assertEqual(0, LMath.Sign(0), "Sign should return 0 for 0");
TDD.assertEqual(1, LMath.Sign(2), "Sign should return 1 for positive numbers");
TDD.assertEqual(1, LMath.Trunc(1.234), "Trunc should return floor x for positive numbers");
TDD.assertEqual(-1, LMath.Trunc(-1.234), "Trunc should return ceil x for negative numbers");
TDD.assertEqual(1, LMath.Floor(1.234), "Floor should return rounded down number");
TDD.assertEqual(-2, LMath.Floor(-1.234), "Floor should return rounded down number(negative)");
TDD.assertEqual(2, LMath.Ceil(1.234), "Ceil should return rounded up number");
TDD.assertEqual(-1, LMath.Ceil(-1.234), "Ceil should return rounded up number(negative)");
TDD.assertEqual(3, LMath.Round(2.6), "Round should return ceil if number is or is over x.5");
TDD.assertEqual(2, LMath.Round(2.4), "Round should return floor if number is below x.5");
TDD.assertEqual(2, LMath.Sqrt(4), "Sqrt should return square root of number");
TDD.assertEqual(3, LMath.Cbrt(27), "Cbrt should return cube root of number");
TDD.assertEqual(8, LMath.Pow(2)(3), "Pow should return x^y");
TDD.assertEqual(3, LMath.Max(3)(2), "Max should return largest number");
TDD.assertEqual(2, LMath.Min(3)(2), "Min should return lowest number");
TDD.assertEqual(3, LMath.AMax([1,3,2]), "AMax should return highest num in array");
TDD.assertEqual(1, LMath.AMin([1,3,2]), "AMin should return lowest num in array");
TDD.assertEqual(6, LMath.Factorial(3), "Factorial should return n!");
console.log(LMath.Sin(1));
console.log(LMath.Cos(1));
